{
    "swagger": "2.0",
    "info": {
        "description": "This API frontends the Volume APIs for SDSaaS",
        "title": "SDSaaS Volume API",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/hosts": {
            "get": {
                "description": "This request lists all hosts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "List all hosts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A server-provided token determining what resource to start the page on",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The number of resources to return on a page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters the collection to resources with a name property matching the exact specified name.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters the collection to resources with a sdsaas_instance_id property matching the exact specified name.",
                        "name": "sdsaas_instance_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters the collection to resources with a sdsaas_workspace_id property matching the exact specified name.",
                        "name": "sdsaas_workspace_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Hosts were retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/proper.HostCollection"
                        }
                    }
                }
            },
            "post": {
                "description": "This request creates a new host from a host Template object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Create a host",
                "parameters": [
                    {
                        "description": "Host Template",
                        "name": "HostTemplate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proper.HostTemplate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Host creation request has been accepted",
                        "schema": {
                            "$ref": "#/definitions/proper.Host"
                        }
                    },
                    "400": {
                        "description": "An invalid host object was provided.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "404": {
                        "description": "The specified service_instance.id not found",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            }
        },
        "/hosts/{id}": {
            "get": {
                "description": "This request retrieves a host specified by the identifier in the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Retrieve a Host.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Host identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The host was retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/proper.Host"
                        }
                    },
                    "404": {
                        "description": "A host with the specified identifier could not be found.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            },
            "delete": {
                "description": "This request deletes a host.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Delete a Host.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Host identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Host was deleted successfully."
                    },
                    "404": {
                        "description": "Host with specified id not found",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "409": {
                        "description": "Host cannot be deleted as it is mapped to one or more Volume",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            },
            "patch": {
                "description": "This request updates a Host with the information in a provided host patch.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Update a given Host.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The host identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Host Template",
                        "name": "HostTemplate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proper.HostPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Host was updated successfully",
                        "schema": {
                            "$ref": "#/definitions/proper.Host"
                        }
                    },
                    "400": {
                        "description": "An invalid Host patch was provided.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "404": {
                        "description": "A Host with the specified identifier could not be found.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            }
        },
        "/hosts/{id}/volumes": {
            "delete": {
                "description": "This request deletes a all volume mappings and host.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Deletes all the volume mappings for a given host.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Host identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The deletion request was accepted"
                    },
                    "404": {
                        "description": "The volume mapping for the specified host ID could not be found",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            }
        },
        "/hosts/{id}/volumes/{id}": {
            "put": {
                "description": "This request creates a host to volume mapping.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Maps the given volume to the given host.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The host identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Volume identifier",
                        "name": "VolumeID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request accepted for processing",
                        "schema": {
                            "$ref": "#/definitions/proper.Host"
                        }
                    },
                    "400": {
                        "description": "An invalid Host patch was provided.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "404": {
                        "description": "A Host with the specified identifier could not be found.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            },
            "delete": {
                "description": "This request deletes a particular volume mapped from the host.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Deletes the given volume mapping from the host.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Host identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Volume identifier",
                        "name": "VolumeID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The deletion request was accepted"
                    },
                    "404": {
                        "description": "The volume mapping with the specified identifier could not be found",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            }
        },
        "/volumes": {
            "get": {
                "description": "This request lists all volumes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "List all Volumes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A server-provided token determining what resource to start the page on",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The number of resources to return on a page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters the collection to resources with a name property matching the exact specified name.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters the collection to resources with a sdsaas_instance_id property matching the exact specified name.",
                        "name": "sdsaas_instance_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The volumes were retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/proper.VolumeCollection"
                        }
                    }
                }
            },
            "post": {
                "description": "This request creates a new volume from a volume Template object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Create a Volume",
                "parameters": [
                    {
                        "description": "Volume Template",
                        "name": "VolumeTemplate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proper.VolumeTemplate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Volume creation request has been accepted",
                        "schema": {
                            "$ref": "#/definitions/proper.Volume"
                        }
                    },
                    "400": {
                        "description": "An invalid volume object was provided.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "404": {
                        "description": "The specified service_instance.id not found",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            }
        },
        "/volumes/{id}": {
            "get": {
                "description": "This request retrieves a single volume specified by the identifier in the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Retrieve a volume.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The volume identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The volume was retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/proper.Volume"
                        }
                    },
                    "404": {
                        "description": "A volume with the specified identifier could not be found.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            },
            "delete": {
                "description": "This request deletes a volume.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Delete a volume.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The volume identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The volume was deleted successfully."
                    },
                    "404": {
                        "description": "Volume with specified id not found",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "409": {
                        "description": "Volume cannot be deleted as it is mapped to one or more hosts",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            },
            "patch": {
                "description": "This request updates a volume with the information in a provided volume patch.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Update a volume.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The volume identifier",
                        "name": "ID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Volume Template",
                        "name": "VolumeTemplate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proper.VolumePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The volume was updated successfully",
                        "schema": {
                            "$ref": "#/definitions/proper.Volume"
                        }
                    },
                    "400": {
                        "description": "An invalid volume patch was provided.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    },
                    "404": {
                        "description": "A volume with the specified identifier could not be found.",
                        "schema": {
                            "$ref": "#/definitions/proper.ErrorContainer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "proper.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code A snake case string succinctly identifying the problem\n\t   Example:\n\t     \"missing_value\"\n\t   Pattern: ^[a-z][a-z0-9]*(_[a-z0-9]+)*$",
                    "type": "string"
                },
                "message": {
                    "description": "Message An explanation of the problem\n\t   Example:\n\t     \"The `sdsaas_instance_id` field is required.\"",
                    "type": "string"
                },
                "more_info": {
                    "description": "MoreInfo Link to documentation about this error\n\t   Pattern: ^http(s)?:\\/\\/([^\\/?#]*)([^?#]*)(\\?([^#]*))?(#(.*))?$",
                    "type": "string"
                },
                "target": {
                    "description": "Target no description available",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.ErrorTarget"
                        }
                    ]
                }
            }
        },
        "proper.ErrorContainer": {
            "type": "object",
            "required": [
                "errors"
            ],
            "properties": {
                "errors": {
                    "description": "Errors Array of errors",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.Error"
                    }
                },
                "trace": {
                    "description": "Trace Unique error identifier\n\t   Example:\n\t     \"b1fd1314d09b7aced81414f8f0f30f9a\"\n\t   Pattern: ^[-0-9a-zA-Z_]+$",
                    "type": "string"
                }
            }
        },
        "proper.ErrorTarget": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name The name of the problematic field, query parameter, or header\n\t   Example:\n\t     \"Name: abc\"",
                    "type": "string"
                },
                "type": {
                    "description": "Type The type of input where the problem was\n\t   Example:\n\t     \"field\"",
                    "type": "string"
                },
                "value": {
                    "description": "Value If present, the problematic value within the field, query parameter, or header",
                    "type": "string"
                }
            }
        },
        "proper.Host": {
            "type": "object",
            "required": [
                "nqn",
                "sdsaas_instance_id"
            ],
            "properties": {
                "created_at": {
                    "description": "CreatedAt The date and time that the host was created",
                    "type": "string"
                },
                "id": {
                    "description": "ID The unique identifier for this host\n\t\t\t   Example:\n\t\t\t     \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"\n\t\t       Minimum Length: 1\n\t\t\t   Maximum Length: 64\n\t\t\t   Pattern: ^[-0-9a-z_]+$",
                    "type": "string"
                },
                "name": {
                    "description": "Name The name for this host. The name must not be used by another host.\n\t   If unspecified, the name will be a hyphenated list of randomly-selected words.\n\t   Example:\n\t     \"my-host\"\n\t   Pattern: ^-?([a-z]|[a-z][-a-z0-9]*[a-z0-9]|[0-9][-a-z0-9]*([a-z]|[-a-z][-a-z0-9]*[a-z0-9]))$\n\t   Minimum Length: 1\n\t   Maximum Length: 63",
                    "type": "string"
                },
                "nqn": {
                    "description": "Nqn The NQN of the host configured in customer's environment\n\t   Example:\n\t     \"nqn-abc-1234\"",
                    "type": "string"
                },
                "sdsaas_instance_id": {
                    "description": "SdsaasInstanceID The service instance ID this host should be created in.\n\t\t\t\t   Pattern: ^[-0-9a-z_]+$\n\t\t\t\t   Minimum Length: 1\n\t\t   \t\t   Maximum Length: 64",
                    "type": "string"
                },
                "storage_identifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.StorageIdentifiersReference"
                    }
                },
                "storage_workspace_id": {
                    "description": "StorageWorkspaceID The unique identifier  of parent storage workspace. If not specified, host will be created under \"default\" workspace.\n\t\t\t   Default: default",
                    "type": "string"
                }
            }
        },
        "proper.HostCollection": {
            "type": "object",
            "required": [
                "first",
                "hosts"
            ],
            "properties": {
                "first": {
                    "description": "First A link to the first page of resources",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.PageLink"
                        }
                    ]
                },
                "hosts": {
                    "description": "Host Collection of hosts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.Host"
                    }
                },
                "limit": {
                    "description": "Limit The maximum number of resources that can be returned by the request\n\t   Example:\n\t     20",
                    "type": "integer"
                },
                "next": {
                    "description": "Next A link to the next page of resources. This property is present for all pages\n\t   except the last page",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.PageLink"
                        }
                    ]
                },
                "total_count": {
                    "description": "TotalCount The total number of resources across all pages\n\t   Example:\n\t     132",
                    "type": "integer"
                }
            }
        },
        "proper.HostPatch": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name The name for this Host. The name must not be used by another host.\n\t   Example:\n\t     \"my-host\"\n\t   Minimum Length: 1\n\t   Maximum Length: 63\n\t   Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$",
                    "type": "string"
                }
            }
        },
        "proper.HostTemplate": {
            "type": "object",
            "required": [
                "nqn",
                "sdsaas_instance_id"
            ],
            "properties": {
                "name": {
                    "description": "Name The name for this host. The name must not be used by another host.\n\t   If unspecified, the name will be a hyphenated list of randomly-selected words.\n\t   Example:\n\t     \"my-host\"\n\t   Pattern: ^-?([a-z]|[a-z][-a-z0-9]*[a-z0-9]|[0-9][-a-z0-9]*([a-z]|[-a-z][-a-z0-9]*[a-z0-9]))$\n\t   Minimum Length: 1\n\t   Maximum Length: 63",
                    "type": "string"
                },
                "nqn": {
                    "description": "Nqn The NQN of the host configured in customer's environment\n\t   Example:\n\t     \"nqn-abc-1234\"",
                    "type": "string"
                },
                "sdsaas_instance_id": {
                    "description": "SdsaasInstanceID The service instance ID this host should be created in.\n\t\t\t\t   Pattern: ^[-0-9a-z_]+$\n\t\t\t\t   Minimum Length: 1\n\t\t   \t\t   Maximum Length: 64",
                    "type": "string"
                },
                "storage_workspace_id": {
                    "description": "StorageWorkspaceID The unique identifier  of parent storage workspace. If not specified, host will be created under \"default\" workspace.\n\t\t\t   Default: default",
                    "type": "string"
                },
                "volume_mappings": {
                    "description": "VolumeMapping The unique identifier  of the volume to be mapped to this host\n\t\t\t\t   Example:\n\t\t     \t\t{\n\t\t     \t\t \"volume_id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"\n\t\t    \t\t}",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.VolumeMappingIdentity"
                    }
                }
            }
        },
        "proper.PageLink": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "Href The URL for a page of resources\n\t   Pattern: ^http(s)?:\\/\\/([^\\/?#]*)([^?#]*)(\\?([^#]*))?(#(.*))?$",
                    "type": "string"
                }
            }
        },
        "proper.StorageIdentifiersReference": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "volume_mapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.VolumeMappingReference"
                    }
                }
            }
        },
        "proper.Volume": {
            "type": "object",
            "required": [
                "health_reasons",
                "sdsaas_instance_id",
                "status_reasons",
                "storage_workspace_id"
            ],
            "properties": {
                "adjustable_iops_supported": {
                    "description": "AdjustableIopsSupported Indicates whether this volume supports adjustable IOPS.",
                    "type": "boolean"
                },
                "bandwidth": {
                    "description": "Bandwidth The maximum bandwidth (in megabits per second) for the volume\n\t   Example:\n\t     1000",
                    "type": "integer"
                },
                "capacity": {
                    "description": "Capacity The capacity of the volume (in gigabytes).\n\t   Example:\n\t     30",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt The date and time that the volume was created",
                    "type": "string"
                },
                "health_reasons": {
                    "description": "HealthReasons The reasons for the current `health_state` (if any).\n\n\t   The enumerated reason code values for this property will expand in the future. When\n\t   processing this property, check for and log unknown values. Optionally halt processing\n\t   and surface the error, or bypass the resource on which the unexpected reason code was\n\t   encountered.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.VolumeHealthReason"
                    }
                },
                "health_state": {
                    "description": "HealthState no description available",
                    "type": "string"
                },
                "id": {
                    "description": "ID The unique identifier for this volume\n\t\t\t   Example:\n\t\t\t     \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"\n\t\t       Minimum Length: 1\n\t\t\t   Maximum Length: 64\n\t\t\t   Pattern: ^[-0-9a-z_]+$",
                    "type": "string"
                },
                "iops": {
                    "description": "Iops The maximum I/O operations per second (IOPS) for this volume.\n\t   Example:\n\t     10000",
                    "type": "integer"
                },
                "name": {
                    "description": "Name The name for this volume. The name is unique across all volumes.\n\t   Example:\n\t     \"my-volume\"\n\t   Pattern: ^-?([a-z]|[a-z][-a-z0-9]*[a-z0-9]|[0-9][-a-z0-9]*([a-z]|[-a-z][-a-z0-9]*[a-z0-9]))$\n\t   Minimum Length: 1\n\t   Maximum Length: 63",
                    "type": "string"
                },
                "profile": {
                    "description": "Profile for this volume.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.VolumeProfileReference"
                        }
                    ]
                },
                "resource_type": {
                    "description": "ResourceType The resource type\n\t   Pattern: ^[a-z][a-z0-9]*(_[a-z0-9]+)*$\n\t   Example:\n\t     \"volume\"",
                    "type": "string"
                },
                "sdsaas_instance_id": {
                    "description": "SdsaasInstanceID InstanceID for this Volume. ID of the service instance this volume belongs to.\n\t\t\t\t   Pattern: ^[-0-9a-z_]+$\n\t\t\t\t   Minimum Length: 1\n\t\t   \t\t   Maximum Length: 64",
                    "type": "string"
                },
                "status": {
                    "description": "Status The status of the volume.\n\n\t   The enumerated values for this property will expand in the future. When\n\t   processing this property, check for and log unknown values. Optionally halt\n\t   processing and surface the error, or bypass the volume on which the unexpected\n\t   property value was encountered.\n\t   Example:\n\t     \"available\"",
                    "type": "string"
                },
                "status_reasons": {
                    "description": "StatusReasons The reasons for the current status (if any).\n\n\t   The enumerated reason code values for this property will expand in the future. When\n\t   processing this property, check for and log unknown values. Optionally halt processing\n\t   and surface the error, or bypass the resource on which the unexpected reason code was\n\t   encountered.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.VolumeStatusReason"
                    }
                },
                "storage_workspace_id": {
                    "description": "StorageWorkspaceID WorkspaceID for this volume.\n\t\t\t   Default: default",
                    "type": "string"
                }
            }
        },
        "proper.VolumeCollection": {
            "type": "object",
            "required": [
                "first",
                "volumes"
            ],
            "properties": {
                "first": {
                    "description": "First A link to the first page of resources",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.PageLink"
                        }
                    ]
                },
                "limit": {
                    "description": "Limit The maximum number of resources that can be returned by the request\n\t   Example:\n\t     20",
                    "type": "integer"
                },
                "next": {
                    "description": "Next A link to the next page of resources. This property is present for all pages\n\t   except the last page",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.PageLink"
                        }
                    ]
                },
                "total_count": {
                    "description": "TotalCount The total number of resources across all pages\n\t   Example:\n\t     132",
                    "type": "integer"
                },
                "volumes": {
                    "description": "Volumes Collection of volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proper.Volume"
                    }
                }
            }
        },
        "proper.VolumeHealthReason": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code A snake case string succinctly identifying the reason for this health state.\n\t   Example:\n\t     \"insufficient_instance_bandwidth\"\n\t   Pattern: ^[a-z][a-z0-9]*(_[a-z0-9]+)*$",
                    "type": "string"
                },
                "message": {
                    "description": "Message An explanation of the reason for this health state.\n\t   Example:\n\t     \"Performance will be degraded while this volume is Insufficient Instance Bandwidth\"",
                    "type": "string"
                }
            }
        },
        "proper.VolumeMappingIdentity": {
            "type": "object",
            "required": [
                "volume_id"
            ],
            "properties": {
                "volume_id": {
                    "description": "VolumeID The Volume ID that need to be mapped with Host",
                    "type": "string"
                }
            }
        },
        "proper.VolumeMappingReference": {
            "type": "object",
            "required": [
                "volume_id",
                "volume_name"
            ],
            "properties": {
                "status": {
                    "type": "string"
                },
                "volume_id": {
                    "description": "VolumeID The Volume ID that need to be mapped with Host",
                    "type": "string"
                },
                "volume_name": {
                    "type": "string"
                }
            }
        },
        "proper.VolumePatch": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Capacity The capacity to use for the volume (in gigabytes).\n\t   Additionally:\n\t   - The specified value must not be less than the current capacity.\n\t   - The specified value must not exceed the `capacity.max` of the volume profile.\n\t   Example:\n\t     100",
                    "type": "integer"
                },
                "name": {
                    "description": "Name The name for this volume. The name must not be used by another volume.\n\t   Example:\n\t     \"my-volume\"\n\t   Minimum Length: 1\n\t   Maximum Length: 63\n\t   Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$",
                    "type": "string"
                }
            }
        },
        "proper.VolumeProfileIdentity": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name The globally unique name for this volume profile\n\t   Example:\n\t     \"sds-general-purpose\"",
                    "type": "string"
                }
            }
        },
        "proper.VolumeProfileReference": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name The globally unique name for this volume profile\n\t   Example:\n\t     \"sds-general-purpose\"\n\t   Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9]|[0-9][-a-z0-9]*([a-z]|[-a-z][-a-z0-9]*[a-z0-9]))$",
                    "type": "string"
                }
            }
        },
        "proper.VolumeStatusReason": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code A snake case string succinctly identifying the status reason\n\t   Example:\n\t     \"volume not found\"\n\t   Pattern: ^[a-z]+(_[a-z]+)*$",
                    "type": "string"
                },
                "message": {
                    "description": "Message An explanation of the status reason",
                    "type": "string"
                },
                "more_info": {
                    "description": "MoreInfo Link to documentation about this status reason\n\n\t   Pattern: ^http(s)?:\\/\\/([^\\/?#]*)([^?#]*)(\\?([^#]*))?(#(.*))?$",
                    "type": "string"
                }
            }
        },
        "proper.VolumeTemplate": {
            "type": "object",
            "required": [
                "capacity",
                "sdsaas_instance_id"
            ],
            "properties": {
                "capacity": {
                    "description": "Capacity The capacity to use for the volume (in gigabytes). The specified value must be within\n\t   the `capacity` range of the volume's profile.\n\t   Example:\n\t     40",
                    "type": "integer"
                },
                "name": {
                    "description": "Name The name for this volume. The name must not be used by another volume.\n\t   If unspecified, the name will be a hyphenated list of randomly-selected words.\n\t   Example:\n\t     \"my-volume\"\n\t   Pattern: ^-?([a-z]|[a-z][-a-z0-9]*[a-z0-9]|[0-9][-a-z0-9]*([a-z]|[-a-z][-a-z0-9]*[a-z0-9]))$\n\t   Minimum Length: 1\n\t   Maximum Length: 63",
                    "type": "string"
                },
                "profile": {
                    "description": "Profile use for this volume.\n\t   Example:\n\t     {\n\t       \"name\": \"sds-general-purpose\"\n\t     }",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proper.VolumeProfileIdentity"
                        }
                    ]
                },
                "sdsaas_instance_id": {
                    "description": "SdsaasInstanceID The service instance ID this volume should be created in.\n\t\t\t\t   Pattern: ^[-0-9a-z_]+$\n\t\t\t\t   Minimum Length: 1\n\t\t   \t\t   Maximum Length: 64",
                    "type": "string"
                }
            }
        }
    }
}